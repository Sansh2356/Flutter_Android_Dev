Fire base is  a server which is server less
Adding of firebase dependencies will be absolutely right as it is published by an authentic source hence threr 
is no offense in doing so.
We will add those dependencies to our code by:-
flutter pub add command
Use and diffrenec of hot reload and that of hot restarted
they may differ in states as well as in other things such as 
sometimes the change may be so major that it would not be possible for hot reload to express it 
and provide the change accordingly in such cases hot restart will provide us with the desired result and changes which would be visible oon the android/Ios platform 
visible on the android mirroring and the ios platform.

::stateless and stateful:-
stateless will not contain any mutable peices of information whereas stateful will contain mutable data.
::Scaffold makes us make a app presentable to the 
presenter or the customer.
::widget and child inside the body which is used to explain the variuos things.
::init state,disposed state 
both are required in case of creation of proxy objects such as it acts as a bridge between
the text that has been enetered by the user and the backend.
::Text controller,controller keyword,textfield
::Using of decoration keyword that enables the use of 
hint text.
::Obscure text and he property of disabling autocorrect and enable suggestions.
::Handling the network error and also the configutation not found error 
while checking the console for registering it by accesing options from firebase console.
::Widget binding to make sure that firebase is initalized before anything is rendered on the screen 
which can be done with the help of widget binding.
::Flutter future builder widget to ensure that it will make the authentication/initialization of app
before the rendering and processing.
::widget builder
::changing the homepoage to login view and refactoring our code ie. it means that
we will push seperate functionalities to files of their own.
::Handling exceptions in dart. which can be done using try and exception method in flutter using the accesing of
e.code and other things.
emailalradyinuse,weak-password,wrong password some exceptions associated with the login and register view,invalid email.
::Inorder to get rid off the initialization of app through firebase we will have to initalize the app before the rendering is done.
Adding the null check for the user information.
::One of the null check error that we encountered while accesing whteher the email of the user is verified or not 
was because the firebase require the developers to solve the case in whcih if the email accessed by you is null then how ill you proceed
which was sole by using null check ?. operator and along with that making an intermediate variable that will convert the pseudo bool type to actual bool type andresolve our error.
::Pushing views BuildContext. CTA button to send verification email.
Use of await and async along with the idea of onpressed and children in button formation in a project,as it will return us
an event that might occur in future.
::Named routes :-anaonymous routes and other routes which links between two different functionalities and are maps
by nature having the entry of the route name along with a fucntion which returns a widget.
::Material widget not found,textfield because of no scaffold in there.
::Use of actions in the appbar class,popmenu_item and pop_menu in app bar class.
::popmenu_item returns a value which is required to access the information/action which will be performed by it hence we can use the enumeration for that purpose to decreas the complexity of our code.
widget must not be null. 
using log instead of print statements.
::Adding the signout options through adding switch in the popmenubutton widget and using the async and awit functions.
also signing out from the firebase server through authentication accesing.
::Avoiding hardcoding everywhere which can be done by using a file stroing all of our constants such as routes so that if we want to update something in our code we can 
can do so in the entire body of code without changing it by going from the declaration to declaration type.
::Error handling in flutter using generic dialog box which can be shown to the user.
